From e011defcaf2200ffbe34c8b19192fa88f09dd3cb Mon Sep 17 00:00:00 2001
From: Tim Cuthbertson <tim@gfxmonk.net>
Date: Fri, 17 Jun 2011 22:47:38 +1000
Subject: [PATCH 03/12] workaround for super-based keybindings not working

---
 src/core/display.c |   15 ++++++++++++++-
 1 files changed, 14 insertions(+), 1 deletions(-)

diff --git a/src/core/display.c b/src/core/display.c
index 095cbc3..4ffc622 100644
--- a/src/core/display.c
+++ b/src/core/display.c
@@ -1750,13 +1750,26 @@ event_callback (XEvent   *event,
       if (display->grab_op == META_GRAB_OP_COMPOSITOR)
         break;
 
+      /* Hack: If the super key is pressed and the event is not coming
+       * from a metacity window, pretend it came from the focused window
+       * instead. This is necessary because the global grab for the
+       * overlay key makes key combos involving the overlay key appear to
+       * come from the root window.
+       *
+       * TODO: Don't hard code `super` here, figure out the relevant mask
+       *       from display->overlay_key
+       */
+      MetaWindow *assumedWindow = window;
+      if (!window && event->xkey.state & display->super_mask)
+        assumedWindow = meta_display_get_focus_window(display);
+
       /* For key events, it's important to enforce single-handling, or
        * we can get into a confused state. So if a keybinding is
        * handled (because it's one of our hot-keys, or because we are
        * in a keyboard-grabbed mode like moving a window, we don't
        * want to pass the key event to the compositor or GTK+ at all.
        */
-      if (meta_display_process_key_event (display, window, event))
+      if (meta_display_process_key_event (display, assumedWindow, event))
         filter_out_event = bypass_compositor = TRUE;
       break;
     case ButtonPress:
-- 
1.7.3.4

