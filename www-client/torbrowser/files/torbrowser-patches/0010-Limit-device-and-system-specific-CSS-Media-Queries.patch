From 8f97f2f36adb9e4416f3d19af10880c800c846c2 Mon Sep 17 00:00:00 2001
From: Kathleen Brade <brade@pearlcrescent.com>
Date: Thu, 4 Oct 2012 14:28:48 -0400
Subject: [PATCH 10/24] Limit device and system specific CSS Media Queries.

---
 layout/style/nsMediaFeatures.cpp |   71 ++++++++++++++++++++++++-------------
 1 files changed, 46 insertions(+), 25 deletions(-)

diff --git a/layout/style/nsMediaFeatures.cpp b/layout/style/nsMediaFeatures.cpp
index 6eca06e..5b1df7e 100644
--- a/layout/style/nsMediaFeatures.cpp
+++ b/layout/style/nsMediaFeatures.cpp
@@ -130,6 +130,9 @@ GetDeviceContextFor(nsPresContext* aPresContext)
 static nsSize
 GetDeviceSize(nsPresContext* aPresContext)
 {
+  if (!aPresContext->IsChrome()) {
+    return GetSize(aPresContext);
+  } else {
     nsSize size;
     if (aPresContext->IsRootPaginatedDocument())
         // We want the page size, including unprintable areas and margins.
@@ -140,6 +143,7 @@ GetDeviceSize(nsPresContext* aPresContext)
         GetDeviceContextFor(aPresContext)->
             GetDeviceSurfaceDimensions(size.width, size.height);
     return size;
+  }
 }
 
 static nsresult
@@ -183,17 +187,17 @@ static nsresult
 GetDeviceOrientation(nsPresContext* aPresContext, const nsMediaFeature*,
                      nsCSSValue& aResult)
 {
-    nsSize size = GetDeviceSize(aPresContext);
-    PRInt32 orientation;
-    if (size.width > size.height) {
-        orientation = NS_STYLE_ORIENTATION_LANDSCAPE;
-    } else {
-        // Per spec, square viewports should be 'portrait'
-        orientation = NS_STYLE_ORIENTATION_PORTRAIT;
-    }
-
-    aResult.SetIntValue(orientation, eCSSUnit_Enumerated);
-    return NS_OK;
+  nsSize size = GetDeviceSize(aPresContext);
+  PRInt32 orientation;
+  if (size.width > size.height) {
+      orientation = NS_STYLE_ORIENTATION_LANDSCAPE;
+  } else {
+      // Per spec, square viewports should be 'portrait'
+      orientation = NS_STYLE_ORIENTATION_PORTRAIT;
+  }
+
+  aResult.SetIntValue(orientation, eCSSUnit_Enumerated);
+  return NS_OK;
 }
 
 static nsresult
@@ -236,13 +240,17 @@ static nsresult
 GetColor(nsPresContext* aPresContext, const nsMediaFeature*,
          nsCSSValue& aResult)
 {
-    // FIXME:  This implementation is bogus.  nsDeviceContext
-    // doesn't provide reliable information (should be fixed in bug
-    // 424386).
-    // FIXME: On a monochrome device, return 0!
-    nsDeviceContext *dx = GetDeviceContextFor(aPresContext);
-    PRUint32 depth;
-    dx->GetDepth(depth);
+    PRUint32 depth = 24; // Always return 24 to non-chrome callers.
+
+    if (aPresContext->IsChrome()) {
+        // FIXME:  This implementation is bogus.  nsDeviceContext
+        // doesn't provide reliable information (should be fixed in bug
+        // 424386).
+        // FIXME: On a monochrome device, return 0!
+        nsDeviceContext *dx = GetDeviceContextFor(aPresContext);
+        dx->GetDepth(depth);
+    }
+
     // The spec says to use bits *per color component*, so divide by 3,
     // and round down, since the spec says to use the smallest when the
     // color components differ.
@@ -280,9 +288,14 @@ static nsresult
 GetResolution(nsPresContext* aPresContext, const nsMediaFeature*,
               nsCSSValue& aResult)
 {
-    // Resolution values are in device pixels, not CSS pixels.
-    nsDeviceContext *dx = GetDeviceContextFor(aPresContext);
-    float dpi = float(dx->AppUnitsPerPhysicalInch()) / float(dx->AppUnitsPerDevPixel());
+    float dpi = 96; // Always return 96 to non-chrome callers.
+
+    if (aPresContext->IsChrome()) {
+      // Resolution values are in device pixels, not CSS pixels.
+      nsDeviceContext *dx = GetDeviceContextFor(aPresContext);
+      dpi = float(dx->AppUnitsPerPhysicalInch()) / float(dx->AppUnitsPerDevPixel());
+    }
+
     aResult.SetFloatValue(dpi, eCSSUnit_Inch);
     return NS_OK;
 }
@@ -311,8 +324,12 @@ static nsresult
 GetDevicePixelRatio(nsPresContext* aPresContext, const nsMediaFeature*,
                     nsCSSValue& aResult)
 {
-  float ratio = aPresContext->CSSPixelsToDevPixels(1.0f);
-  aResult.SetFloatValue(ratio, eCSSUnit_Number);
+  if (aPresContext->IsChrome()) {
+    float ratio = aPresContext->CSSPixelsToDevPixels(1.0f);
+    aResult.SetFloatValue(ratio, eCSSUnit_Number);
+  } else {
+    aResult.SetFloatValue(1.0, eCSSUnit_Number);
+  }
   return NS_OK;
 }
 
@@ -320,18 +337,21 @@ static nsresult
 GetSystemMetric(nsPresContext* aPresContext, const nsMediaFeature* aFeature,
                 nsCSSValue& aResult)
 {
+  if (aPresContext->IsChrome()) {
     NS_ABORT_IF_FALSE(aFeature->mValueType == nsMediaFeature::eBoolInteger,
                       "unexpected type");
     nsIAtom *metricAtom = *aFeature->mData.mMetric;
     bool hasMetric = nsCSSRuleProcessor::HasSystemMetric(metricAtom);
     aResult.SetIntValue(hasMetric ? 1 : 0, eCSSUnit_Integer);
-    return NS_OK;
+  }
+  return NS_OK;
 }
 
 static nsresult
 GetWindowsTheme(nsPresContext* aPresContext, const nsMediaFeature* aFeature,
                 nsCSSValue& aResult)
 {
+  if (aPresContext->IsChrome()) {
     aResult.Reset();
 #ifdef XP_WIN
     PRUint8 windowsThemeId =
@@ -350,7 +370,8 @@ GetWindowsTheme(nsPresContext* aPresContext, const nsMediaFeature* aFeature,
         }
     }
 #endif
-    return NS_OK;
+  }
+  return NS_OK;
 }
 
 /*
-- 
1.7.5.4

