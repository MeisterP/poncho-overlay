diff --unified --new-file --recursive --show-c-function '--color=auto' garminexport-0.4.2-orig/garminexport/backup.py garminexport-0.4.2/garminexport/backup.py
--- garminexport-0.4.2-orig/garminexport/backup.py	2022-09-22 16:02:38.000000000 +0200
+++ garminexport-0.4.2/garminexport/backup.py	2023-09-27 20:44:18.041481980 +0200
@@ -4,7 +4,6 @@ import codecs
 import json
 import logging
 import os
-from datetime import datetime
 
 log = logging.getLogger(__name__)
 
diff --unified --new-file --recursive --show-c-function '--color=auto' garminexport-0.4.2-orig/garminexport/garminclient.py garminexport-0.4.2/garminexport/garminclient.py
--- garminexport-0.4.2-orig/garminexport/garminclient.py	2023-05-18 08:46:30.000000000 +0200
+++ garminexport-0.4.2/garminexport/garminclient.py	2023-09-27 20:45:02.185168254 +0200
@@ -7,9 +7,9 @@ import json
 import logging
 import os
 import os.path
-import re
 import sys
 import zipfile
+import garth
 from datetime import timedelta, datetime
 from builtins import range
 from functools import wraps
@@ -134,84 +134,15 @@ class GarminClient(object):
     def _authenticate(self):
         log.info("authenticating user ...")
 
-        form_data = {
-            "username": self.username,
-            "password": self.password,
-            "embed": "false",
-            "_csrf": self._get_csrf_token(),
-        }
-        headers = {
-            'origin': 'https://sso.garmin.com',
-        }
-        if self._user_agent_fn:
-            user_agent = self._user_agent_fn()
-            if not user_agent:
-                raise ValueError("user_agent_fn didn't produce a value")
-            headers['User-Agent'] = user_agent
-
-        auth_response = self.session.post(
-            SSO_SIGNIN_URL, headers=headers, params=self._auth_params(), data=form_data)
-        log.debug("got auth response: %s", auth_response.text)
-        if auth_response.status_code != 200:
-            raise ValueError("authentication failure: did you enter valid credentials?")
-        auth_ticket_url = self._extract_auth_ticket_url(auth_response.text)
-        log.debug("auth ticket url: '%s'", auth_ticket_url)
+        try:
+            garth.login(self.username, self.password)
+        except Exception as ex:
+            raise ValueError("Authentication failure: {}. Did you enter correct credentials?".format(ex))
 
-        log.info("claiming auth ticket ...")
-        response = self.session.get(auth_ticket_url)
-        if response.status_code != 200:
-            raise RuntimeError(
-                "auth failure: failed to claim auth ticket: {}: {}\n{}".format(
-                    auth_ticket_url, response.status_code, response.text))
-
-        # appears like we need to touch base with the main page to complete the
-        # login ceremony.
-        self.session.get('https://connect.garmin.com/modern')
         # This header appears to be needed on subsequent session requests or we
         # end up with a 402 response from Garmin.
-        self.session.headers.update({'NK': 'NT'})
+        self.session.headers.update({'NK': 'NT', 'authorization': garth.client.oauth2_token.__str__(), 'di-backend': 'connectapi.garmin.com'})
 
-    def _get_csrf_token(self):
-        """Retrieves a Cross-Site Request Forgery (CSRF) token from Garmin's login
-        page. The token is passed along in the login form for increased
-        security."""
-        log.info("fetching CSRF token ...")
-        resp = self.session.get(SSO_LOGIN_URL, params=self._auth_params())
-        if resp.status_code != 200:
-            raise ValueError("auth failure: could not load {}".format(SSO_LOGIN_URL))
-        # extract CSRF token
-        csrf_token = re.search(r'<input type="hidden" name="_csrf" value="(\w+)"',
-                               resp.content.decode('utf-8'))
-        if not csrf_token:
-            raise ValueError("auth failure: no CSRF token in {}".format(SSO_LOGIN_URL))
-        return csrf_token.group(1)
-
-    def _auth_params(self):
-        """A set of request query parameters that need to be present for Garmin to
-        accept our login attempt.
-        """
-        return {
-            "service": "https://connect.garmin.com/modern/",
-            "gauthHost": "https://sso.garmin.com/sso",
-        }
-
-
-    @staticmethod
-    def _extract_auth_ticket_url(auth_response):
-        """Extracts an authentication ticket URL from the response of an
-        authentication form submission. The auth ticket URL is typically
-        of form:
-
-          https://connect.garmin.com/modern?ticket=ST-0123456-aBCDefgh1iJkLmN5opQ9R-cas
-
-        :param auth_response: HTML response from an auth form submission.
-        """
-        match = re.search(r'response_url\s*=\s*"(https:[^"]+)"', auth_response)
-        if not match:
-            raise RuntimeError(
-                "auth failure: unable to extract auth ticket URL. did you provide a correct username/password?")
-        auth_ticket_url = match.group(1).replace("\\", "")
-        return auth_ticket_url
 
     @require_session
     def list_activities(self):
@@ -250,7 +181,7 @@ class GarminClient(object):
         """
         log.debug("fetching activities %d through %d ...", start_index, start_index + max_limit - 1)
         response = self.session.get(
-            "https://connect.garmin.com/proxy/activitylist-service/activities/search/activities",
+            "https://connect.garmin.com/activitylist-service/activities/search/activities",
             params={"start": start_index, "limit": max_limit})
         if response.status_code != 200:
             raise Exception(
@@ -283,7 +214,7 @@ class GarminClient(object):
         :rtype: dict
         """
         response = self.session.get(
-            "https://connect.garmin.com/proxy/activity-service/activity/{}".format(activity_id))
+            "https://connect.garmin.com/activity-service/activity/{}".format(activity_id))
         if response.status_code != 200:
             log.error(u"failed to fetch json summary for activity %s: %d\n%s",
                       activity_id, response.status_code, response.text)
@@ -304,7 +235,7 @@ class GarminClient(object):
         """
         # mounted at xml or json depending on result encoding
         response = self.session.get(
-            "https://connect.garmin.com/proxy/activity-service/activity/{}/details".format(activity_id))
+            "https://connect.garmin.com/activity-service/activity/{}/details".format(activity_id))
         if response.status_code != 200:
             raise Exception(u"failed to fetch json activityDetails for {}: {}\n{}".format(
                 activity_id, response.status_code, response.text))
@@ -324,11 +255,11 @@ class GarminClient(object):
         :rtype: str
         """
         response = self.session.get(
-            "https://connect.garmin.com/proxy/download-service/export/gpx/activity/{}".format(activity_id))
+            "https://connect.garmin.com/download-service/export/gpx/activity/{}".format(activity_id))
         # An alternate URL that seems to produce the same results
         # and is the one used when exporting through the Garmin
         # Connect web page.
-        # response = self.session.get("https://connect.garmin.com/proxy/activity-service-1.1/gpx/activity/{}?full=true".format(activity_id))
+        # response = self.session.get("https://connect.garmin.com/activity-service-1.1/gpx/activity/{}?full=true".format(activity_id))
 
         # A 404 (Not Found) or 204 (No Content) response are both indicators
         # of a gpx file not being available for the activity. It may, for
@@ -356,7 +287,7 @@ class GarminClient(object):
         """
 
         response = self.session.get(
-            "https://connect.garmin.com/proxy/download-service/export/tcx/activity/{}".format(activity_id))
+            "https://connect.garmin.com/download-service/export/tcx/activity/{}".format(activity_id))
         if response.status_code == 404:
             return None
         if response.status_code != 200:
@@ -377,7 +308,7 @@ class GarminClient(object):
         :rtype: (str, str)
         """
         response = self.session.get(
-            "https://connect.garmin.com/proxy/download-service/files/activity/{}".format(activity_id))
+            "https://connect.garmin.com/download-service/files/activity/{}".format(activity_id))
         # A 404 (Not Found) response is a clear indicator of a missing .fit
         # file. As of lately, the endpoint appears to have started to
         # respond with 500 "NullPointerException" on attempts to download a
@@ -433,7 +364,7 @@ class GarminClient(object):
           :obj:`None` if upload is still processing.
         :rtype: int
         """
-        response = self.session.get("https://connect.garmin.com/proxy/activity-service/activity/status/{}/{}?_={}".format(
+        response = self.session.get("https://connect.garmin.com/activity-service/activity/status/{}/{}?_={}".format(
             creation_date[:10], uuid.replace("-",""), int(datetime.now().timestamp()*1000)), headers={"nk": "NT"})
         if response.status_code == 201 and response.headers["location"]:
             # location should be https://connectapi.garmin.com/activity-service/activity/ACTIVITY_ID
@@ -476,7 +407,7 @@ class GarminClient(object):
 
         # upload it
         files = dict(data=(fn, file))
-        response = self.session.post("https://connect.garmin.com/proxy/upload-service/upload/.{}".format(format),
+        response = self.session.post("https://connect.garmin.com/upload-service/upload/.{}".format(format),
                                      files=files, headers={"nk": "NT"})
 
         # check response and get activity ID
@@ -529,7 +460,7 @@ class GarminClient(object):
             data['activityId'] = activity_id
             encoding_headers = {"Content-Type": "application/json; charset=UTF-8"}  # see Tapiriik
             response = self.session.put(
-                "https://connect.garmin.com/proxy/activity-service/activity/{}".format(activity_id),
+                "https://connect.garmin.com/activity-service/activity/{}".format(activity_id),
                 data=json.dumps(data), headers=encoding_headers)
             if response.status_code != 204:
                 raise Exception(u"failed to set metadata for activity {}: {}\n{}".format(
diff --unified --new-file --recursive --show-c-function '--color=auto' garminexport-0.4.2-orig/setup.cfg garminexport-0.4.2/setup.cfg
--- garminexport-0.4.2-orig/setup.cfg	2023-05-18 10:02:13.324276700 +0200
+++ garminexport-0.4.2/setup.cfg	2023-09-27 20:43:35.415783201 +0200
@@ -39,6 +39,7 @@ python_requires = >=3.5
 install_requires = 
 	requests>=2.0,<3
 	python-dateutil~=2.4
+	garth~=0.4
 
 [options.extras_require]
 cloudflare = cloudscraper~=1.2
